%% -*- mode: Erlang; fill-column: 132; comment-column: 118; -*-
%%%-------------------------------------------------------------------
%%% Copyright (c) 2007-2010 Erlware
%%%
%%% Permission is hereby granted, free of charge, to any
%%% person obtaining a copy of this software and associated
%%% documentation files (the "Software"), to deal in the
%%% Software without restriction, including without limitation
%%% the rights to use, copy, modify, merge, publish, distribute,
%%% sublicense, and/or sell copies of the Software, and to permit
%%% persons to whom the Software is furnished to do so, subject to
%%% the following conditions:
%%%
%%% The above copyright notice and this permission notice shall
%%% be included in all copies or substantial portions of the Software.
%%%
%%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%%% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
%%% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%%% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
%%% HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
%%% WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
%%% OTHER DEALINGS IN THE SOFTWARE.
%%%---------------------------------------------------------------------------
%%% @author Eric Merritt <ericbmerritt@gmail.com>
%%% @doc
%%%  The module provides a simple api for the sinan system.
%%%  Two possible arguments may be passed in. The start dir that should
%%%  be somewhere inside a project and a list of args for the system.
%%%
%%%  @type buildref() = string(). A globally unique id for the build
%%%  @type startdir() = string(). A dir that is somewhere in a project
%%%  @type args() = {[{TaskName, args}]}
%%%    TaskName = string(). The name of the task the args apply too.
%%% @end
%%% @copyright (C) 2007-2010 Erlware
%%% Created :  8 Dec 2007 by Eric Merritt <ericbmerritt@gmail.com>
%%%-------------------------------------------------------------------
-module(sinan).

%% API
-export([gen_build_ref/0,
         build/2,
         analyze/2,
         doc/2,
         shell/2,
         gen/2,
         clean/2,
         help/2,
         version/2,
         depends/2,
         test/2,
         release/2,
         dist/2,
         do_task/3,
         do_task/4,
         add_build_event_handler/2,
         start/0]).

%%====================================================================
%% API
%%====================================================================
%%--------------------------------------------------------------------
%% @doc
%%  Add a handler to the build system. Handler should filter for
%%  its own tasks.
%%
%%  Possible events are as follows
%%  ```
%%   {meta_event, fault, EventType, Desc} :: Meta Event Fault
%%   {run_event, RunRef, EventType}  :: Run (Build) Event
%%   {run_event, RunRef, start}  :: Start of a build run
%%   {run_event, RunRef, stop}   :: Stop of a build run
%%   {run_event, RunRef, fault}  :: A build fault (equiv to a stop)
%%   {run_event, RunRef, fault, Reason} :: A build fault with reason (string)
%%   {task_event, RunRef, Task, EventType}  :: an event generated by a task
%%   {task_event, RunRef, Task, EventType, Desc} :: A task event with description
%%   {task_event, RunRef, Task, start}       :: indicates a task start
%%   {task_event, RunRef, Task, start, Desc} :: Task start with desc
%%   {task_event, RunRef, Task, stop} :: A task stop
%%   {task_event, RunRef, Task, stop, Desc} :: A task stop with desc
%%   {task_event, RunRef, Task, fault} :: A task fault (equiv to stop)
%%   {task_event, RunRef, Task, fault, Reason} :: A task fault with reason
%%  '''
%%
%% @spec add_build_event_handler(Handler, Args) -> ok
%% @end
%%--------------------------------------------------------------------
add_build_event_handler(Handler, Args) ->
    eta_event:add_handler(Handler, Args).


%%--------------------------------------------------------------------
%% @doc
%%  Run the build with the specified args. {@link sin_erl_builder}
%% @spec build(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
build(BuildRef, Args) ->
    do_task(build, BuildRef, Args).

%%--------------------------------------------------------------------
%% @doc
%%  Run the analyze task. {@link sin_analyze}
%% @spec analyze(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
analyze(BuildRef, Args) ->
    do_task(analyze, BuildRef, Args).

%%--------------------------------------------------------------------
%% @doc
%%  run the doc task. {@link sin_edoc}
%% @spec doc(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
doc(BuildRef, Args) ->
    do_task(doc, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the shell task. {@link sin_shell}
%% @spec shell(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
shell(BuildRef, Args) ->
   do_task(shell, BuildRef,  Args).

%%--------------------------------------------------------------------
%% @doc
%%  Run the gen task. {@link sin_gen}
%% @spec gen(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
gen(BuildRef, Args) ->
    do_task_bare(singen, gen, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the clean task. {@link sin_clean}
%% @spec clean(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
clean(BuildRef, Args) ->
    do_task(clean, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the help task. {@link sin_help}
%% @spec help(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
help(BuildRef, Args) ->
    do_task_bare(sinhelp, help, BuildRef, Args).

%%--------------------------------------------------------------------
%% @doc
%%  run the version task. {@link sin_version}
%% @spec version(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
version(BuildRef, Args) ->
    do_task_bare(sinversion, version, BuildRef, Args).

%%--------------------------------------------------------------------
%% @doc
%%  run the depends task. {@link sin_depends}
%% @spec depends(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
depends(BuildRef, Args) ->
    do_task(depends, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the test task. {@link sin_test}
%% @spec test(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
test(BuildRef, Args) ->
    do_task(test, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the release task. {@link sin_release_builder}
%% @spec release(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
release(BuildRef, Args) ->
    do_task(release, BuildRef, Args).

%%--------------------------------------------------------------------
%% @doc
%%  run the dist task. {@link sin_dist_builder}
%% @spec dist(BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
dist(BuildRef, Args) ->
    do_task(dist, BuildRef, Args).


%%--------------------------------------------------------------------
%% @doc
%%  run the specified task, with the default chain
%% @spec do_task(Task, BuildRef::buildRef(), Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
do_task(Task, BuildRef, Args) when is_atom(Task) ->
    do_task(sinan, Task, BuildRef, Args).



%%--------------------------------------------------------------------
%% @doc
%%  run the specified task
%% @spec do_task(Chain, Task, BuildRef::buildRef(),
%%   Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
do_task(Chain, Task, BuildRef, Args) when is_atom(Task) ->
    StartDir = find_start_dir(Args),
    try
        ProjectRoot = sin_utils:find_project_root(StartDir),
        Seed = sin_build_config:get_seed(ProjectRoot),
        sin_build_config:start_config(BuildRef, ProjectRoot, Seed, Args),
        eta_engine:run(Chain, Task, BuildRef, sin_hooks:get_hooks_function(ProjectRoot)),
        sin_build_config:stop_config(BuildRef)
    catch
        no_build_config ->
            eta_event:run_fault(BuildRef, "No build config found.");
        {unable_to_create_canonical, {_, _,Desc}}  ->
            eta_event:run_fault(BuildRef,
                                {"Error discovering project layout: ~s", [Desc]})
    end.

%%--------------------------------------------------------------------
%% @doc
%%  run the specified task, without expecting a build config and
%% what not.
%% @spec (Chain, Task, BuildRef::buildRef(),
%%   Args::args()) -> ok
%% @end
%%--------------------------------------------------------------------
do_task_bare(Chain, Task, BuildRef, Args) when is_atom(Task) ->
    StartDir = find_start_dir(Args),
    sin_build_config:start_config(BuildRef, StartDir, Args),
    eta_engine:run(Chain, Task, BuildRef, none),
    sin_build_config:stop_config(BuildRef).

%%--------------------------------------------------------------------
%% @doc
%% Generate a new unique build ref for a run. This allows the
%% use to setup task handlers for the system.
%%
%% @spec () -> GeneratedBuildRef::string()
%% @end
%%--------------------------------------------------------------------
gen_build_ref() ->
    eta_engine:make_run_id().

%%--------------------------------------------------------------------
%% @doc
%%  Allows sinan to be easily started from the shell. This is a
%%  helper function thats mostly just useful in development.
%% @spec start() -> ok
%% @end
%%--------------------------------------------------------------------
start() ->
    application:start(tools),
    application:start(compiler),
    application:start(syntax_tools),
    application:start(edoc),
    application:start(sasl),
    application:start(ibrowse),
    application:start(eunit),
    application:start(ktuo),
    application:start(ewlib),
    application:start(ewrepo),
    application:start(gs),
    application:start(hipe),
    application:start(xmerl),
    application:start(mnesia),
    application:start(dialyzer),
    application:start(etask),
    application:start(sgte),
    application:start(parsetools),
    application:start(asn1),
    application:start(sinan).


%%====================================================================
%% Internal functions
%%====================================================================
%%--------------------------------------------------------------------
%% @doc
%%  parse the start dir out of the args passed in.
%% @spec (Data) -> StartDir
%% @end
%% @private
%%--------------------------------------------------------------------
find_start_dir({obj, Data}) ->
    case lists:keysearch("build", 1, Data) of
         {value, {"build", {obj, Data2}}} ->
            case lists:keysearch("start_dir", 1,  Data2) of
                {value, {"start_dir", StartDir}} ->
                    StartDir;
                _ ->
                    throw(unable_to_find_start_dir)
            end;
        _ ->
            throw(unable_to_find_start_dir)
    end.


