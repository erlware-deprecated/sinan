#!/usr/bin/env python
import os
import sys
import socket
import time
import platform

import libsinan.version_check_handler
import libsinan.args
from libsinan import sinexceptions

CONNECTION_REFUSED = 111
MAC_CONNECTION_REFUSED = 61
SUN_CONNECTION_REFUSED = 128

VERSION = "0.18.0.0"

if platform.system() == 'Darwin':
    CONNECTION_REFUSED = MAC_CONNECTION_REFUSED

if platform.system() == 'SunOS':
    CONNECTION_REFUSED = SUN_CONNECTION_REFUSED

def start_server(largs):
    """ Start the server. Use the 'server_command' client
    opt if it exists, otherwise just use 'sinserv' on the path """
    cmd = "sinserv"
    prefix = ""
    try:
        cmd = largs['client_opts']['server_command']
    except KeyError:
        pass
    try:
        prefix = largs['client_opts']['prefix']
        prefix += "/bin/"
    except KeyError:
        pass
    if os.system(prefix + cmd) != 0:
        raise sinexceptions.SinanError("Unable to start " + cmd)

def try_reconnect(largs, handler, retry_count=10, retry_interval=1, print_retry=True):
    status = 1
    count = 0
    while 1:
        try:
            return handler.handle(largs)
        except (socket.error), e:
            code, reason = e
            if code == CONNECTION_REFUSED:
                if count == 0:
                    print "starting server now."
                    start_server(largs)
                if count < retry_count:
		    if print_retry:
                       print ("Unable to connect after " + str(count *
                                                            retry_interval) +
                              " seconds. Waiting " + str(retry_interval) +
                              " second(s)")
                    count += 1
                    time.sleep(retry_interval)
                    continue
                else:
                    print ("Unable to connect to server after "
                    + str(retry_count) +
                    " tries")
                    status = 5
                    break
            else:
                print "Unable to build got : "
                print e
                status = 3
                break
    return status

def check_version(largs):
    """ Check  that the version of the server matchs this client.
        If it does good. Otherwise ask it to restart """
    original_task = largs['task']
    largs['task'] = "version"
    checkhandler = libsinan.version_check_handler.VersionCheckHandler()
    if not try_reconnect(largs, checkhandler, print_retry=False):
	print "Unable to start or connect to the server."

    if VERSION == libsinan.version_check_handler.version:
       largs['task'] = original_task
       return True

    print "Server version mismatch with client. Attempting server restart"

    largs['task'] = "shutdown"

    shutdownhandler = libsinan.handler.Handler()

    if not try_reconnect(largs, shutdownhandler, print_retry=False):
         print "Unable to start or connect to the server."

    print "Waiting a couple of seconds to give it time to shutdown"
    time.sleep(3)

    largs['task'] = "version"

    if not try_reconnect(largs, checkhandler, print_retry=False):
         print "Unable to start or connect to the server."

    if VERSION == libsinan.version_check_handler.version:
     	print "Restart successful. Starting task"
        largs['task'] = original_task
        return True
    else:
        print ("Restart unsuccessful, it could be that the currently running sinan doesn't support shutdown. " +
               "Its not a big deal, just kill sinan's beam process manually.")
	return False

def initiate_task(largs):
    """ Trys to open a connection. If the connection fails
    due to a connection refused we probably just need to start
    sinan. Look for a sinserve either in a passed in path
    or in the default path"""
    task = largs['task']
    handler = libsinan.get_handler_for_task(task)
    #if check_version(largs):
    try_reconnect(largs, handler)

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    try:
        largs = libsinan.args.parse(argv, "build",
                                    {'url' : 'localhost:8599'})
    except libsinan.args.ParseError, e:
        print e.value
        return 2

    try:
        return initiate_task(largs)
    except sinexceptions.SinanError, e:
        print e.value
    except KeyboardInterrupt:
        print "\n\nexiting at user request. Thanks!"

if __name__ == "__main__":
    sys.exit(main())
