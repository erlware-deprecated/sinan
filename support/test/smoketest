#! /usr/bin/env python
# This smoke test relys on pyexect. You need to have that installed
# before you can run it.  It is available here
# http://www.noah.org/wiki/pexpect

from optparse import OptionParser
import tempfile
import logging
import os
import pexpect

class LoggerWriter(object):
    def __init__(self, logger):
        self.logger = logger

    def write(self, data):
        self.logger.debug(data.rstrip())

    def flush(self):
        #no op
        self

class AppDesc(object):
    def __init__(self,
                 user_name=None,
                 email=None,
                 copyright_holder=None,
                 project_name=None,
                 project_version=None,
                 app_names=None):
        self.user_name = user_name
        self.email = email
        self.copyright_holder = copyright_holder
        self.project_name = project_name
        self.project_version = project_version
        self.app_names = app_names

def do_apply(fun_list, arg):
    res = arg
    for n in fun_list:
        res = n(res)
    return res

def spawn(command, logger):
    logger.debug("spawning %s" % command)
    child = pexpect.spawn(command)
    child.logfile_read = LoggerWriter(logger)
    return child

def spawns(command):
    def check_accepts(f):
        def new_f(*args, **kwds):
            logging.debug("Running Command %s in %s" % (command, os.getcwd()))
            child = spawn(command, logging)
            res = f(child, *args, **kwds)
            logging.debug("Finished %s successfully" % command)
            return res
        new_f.func_name = f.func_name
        return new_f
    return check_accepts

@spawns("sinan gen")
def run_gen(child, appdesc):
    child.expect("your name> ")
    child.sendline(appdesc.user_name)
    child.expect("your email> ")
    child.sendline(appdesc.email)
    child.expect('copyright holder \("%s"\)> ' % appdesc.user_name)
    child.sendline()
    child.expect('project name> ')
    child.sendline(appdesc.project_name)
    child.expect('project version> ')
    child.sendline(appdesc.project_version)
    child.expect('Please specify the ERTS version \(".*"\)> ')
    child.sendline()
    child.expect("app> ")
    child.sendline(appdesc.app_names[0])
    for n in appdesc.app_names[1:]:
        child.expect('app \(""\)> ')
        child.sendline(n)
    child.expect('app \(""\)> ')
    child.sendline()
    child.expect("Project was created, you should be good to go!")
    child.expect(pexpect.EOF)
    return appdesc

def verify_gen(a):
    projdir = os.path.join(os.getcwd(), a.project_name)
    assert os.path.isdir(projdir)
    assert os.path.isdir(os.path.join(projdir, "bin"))
    assert os.path.isfile(os.path.join(projdir, "bin", "erlware_release_start_helper"))
    assert os.path.isfile(os.path.join(projdir, "bin", a.project_name))

    assert os.path.isdir(os.path.join(projdir, "config"))
    assert os.path.isfile(os.path.join(projdir, "config", "sys.config"))

    assert os.path.isdir(os.path.join(projdir, "lib"))
    assert os.path.isfile(os.path.join(projdir, "sinan.cfg"))

    for n in a.app_names:
        assert os.path.isdir(os.path.join(projdir, "lib", n))
        assert os.path.isdir(os.path.join(projdir, "lib", n, "ebin"))
        assert os.path.isdir(os.path.join(projdir, "lib", n, "src"))
        assert os.path.isdir(os.path.join(projdir, "lib", n, "include"))
        assert os.path.isdir(os.path.join(projdir, "lib", n, "doc"))
        assert os.path.isfile(os.path.join(projdir, "lib", n, "src", n + "_app.erl"))
        assert os.path.isfile(os.path.join(projdir, "lib", n, "src", n + "_sup.erl"))
    return a

# gen a new project in the test dir
def test_gen(appdesc):
    return do_apply([run_gen, verify_gen], appdesc)

# build the project
@spawns("sinan build")
def test_build(child, appdesc):
    child.expect(pexpect.EOF)

    build_dir = os.path.join(os.getcwd(), "_build/development/apps/")

    assert os.path.isdir(build_dir)

    for n in appdesc.app_names:
        app_dir = os.path.join(build_dir, "%s-0.1.0" % n)
        assert os.path.isdir(os.path.join(app_dir, "ebin"))
        assert os.path.isdir(os.path.join(app_dir, "src"))
        assert os.path.isdir(os.path.join(app_dir, "include"))
        assert os.path.isdir(os.path.join(app_dir, "doc"))
        assert os.path.isfile(os.path.join(app_dir, "src", n + "_sup.erl"))
        assert os.path.isfile(os.path.join(app_dir, "src", n + "_app.erl"))
        assert os.path.isfile(os.path.join(app_dir, "ebin", n + "_sup.beam"))
        assert os.path.isfile(os.path.join(app_dir, "ebin", n + "_app.beam"))

    return appdesc


# clean the project
@spawns("sinan clean")
def test_clean(child, appdesc):
    child.expect(pexpect.EOF)
    assert not os.path.isdir(os.path.join(os.getcwd(), "_build"))
    return appdesc

# test the project
@spawns("sinan test")
def test_test(child, appdesc):
    child.expect(pexpect.EOF)
    return appdesc
# release
@spawns("sinan release")
def test_release(child, appdesc):
    child.expect(pexpect.EOF)
    version = appdesc.project_version
    name = appdesc.project_name
    version_dir = os.path.join(os.getcwd(), "_build", "development", "releases",
                               "%s-%s" % (name, version))

    logging.debug("Checking version directory at %s " % version_dir)
    assert os.path.isdir(version_dir)
    assert os.path.isfile(os.path.join(version_dir, "%s.boot" % name))
    assert os.path.isfile(os.path.join(version_dir, "%s.rel" % name))
    assert os.path.isfile(os.path.join(version_dir, "%s.script" % name))
    assert os.path.isfile(os.path.join(version_dir, "sys.config"))
    return appdesc

# dist (check the tarball)
@spawns("sinan dist")
def test_dist(child, appdesc):
    child.expect(pexpect.EOF)
    tar_file = os.path.join(os.getcwd(), "_build", "development", "tar",
                           "%s-%s.tar.gz" % (appdesc.project_name, appdesc.project_version))
    assert os.path.isfile(tar_file)
    return appdesc

# run help
@spawns("sinan help")
def test_help(child):
    child.expect(pexpect.EOF)

def run_test(appdesc):
    currentdir = os.getcwd()
    a = test_gen(appdesc)
    os.chdir(os.path.join(currentdir, a.project_name))

    do_apply([test_build,
              test_clean,
              test_build,
              test_test,
              test_release,
              test_dist], a)

    os.chdir(currentdir)

    test_help()


def run_tests():
    run_test(AppDesc(user_name = "Smoke Test User",
                     email = "noreply@erlware.org",
                     copyright_holder = "Smoke Test Copy, LLC.",
                     project_name = "smprj",
                     project_version = "0.21.0.0",
                     app_names = ["app1", "app2", "app3"]))

    run_test(AppDesc(user_name = "Smoke Test User",
                     email = "noreply@erlware.org",
                     copyright_holder = "Smoke Test Copy, LLC.",
                     project_name = "smprj_version1",
                     project_version = "V1922A",
                     app_names = ["app1"]))

    run_test(AppDesc(user_name = "Smoke Test User",
                     email = "noreply@erlware.org",
                     copyright_holder = "Smoke Test Copy, LLC.",
                     project_name = "smprj_version2",
                     project_version = "R12B3-122",
                     app_names = ["app1", "fubyap1"]))


def main():

    parser = OptionParser()
    parser.add_option("-d", "--dir", dest="dirname",
                      help="The directory to generate and test from", default=tempfile.gettempdir())
    parser.add_option("-v", "--verbose",
                      action="store_false", dest="verbose", default=True,
                      help="Verbosity of output")

    (options, args) = parser.parse_args()

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    # create console handler and set level to debug
    ch = logging.StreamHandler()

    if options.verbose:
        ch.setLevel(logging.DEBUG)
    else:
        ch.setLevel(logging.ERROR)

    formatter = logging.Formatter("%(message)s")
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    logger.debug("Creating the test directory in %s " % options.dirname)
    smokedir = tempfile.mkdtemp(prefix='smoke_test_', dir=options.dirname)
    logger.debug("Created smoke dir at %s " % smokedir)

    os.chdir(smokedir)
    run_tests()







if __name__ == "__main__":
    main()
